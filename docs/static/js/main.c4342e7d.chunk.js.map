{"version":3,"sources":["components/TextField.tsx","state/reducer.ts","state/actionTypes.ts","state/actions.ts","StompContext.tsx","ConnectionForm.tsx","ConnectionInfoView.tsx","MessageListView.tsx","components/JsonEditor/JsonInput.tsx","components/JsonEditor/JsonEditor.tsx","SendMessageView.tsx","SubscriptionForm.tsx","SubscriptionListView.tsx","App.tsx","resources/theme.ts","index.tsx"],"names":["TextField","forwardRef","props","ref","useField","name","field","meta","error","Boolean","touched","helperText","defaultProps","fullWidth","ConnectionType","CONNECTED","DISCONNECTED","SUBSCRIPTION_ADDED","SUBSCRIPTION_DISABLED","SUBSCRIPTION_ENABLED","SUBSCRIPTION_REMOVED","MESSAGE_RECEIVED","MESSAGES_CLEARED","reducer","state","action","type","connection","url","connected","connectionType","subscriptions","messages","destination","subscription","enabled","message","timestamp","Actions","disconnected","subscriptionAdded","subscriptionDisabled","subscriptionEnabled","subscriptionRemoved","messageReceived","Date","messagesCleared","initialContextValue","StompContext","createContext","initialState","useStompContext","context","useContext","useDebugValue","StompContextProvider","client","useRef","useReducer","dispatch","connect","useCallback","ws","Promise","resolve","reject","current","Stomp","over","debug","console","disconnect","subscribe","addSubscription","toggleSubscription","unsubscribe","newSubscription","removeSubscription","clearMessages","send","headers","body","JSON","stringify","Provider","value","children","initialValues","WEBSOCKET","ConnectionForm","onSubmit","values","WebSocket","SockJS","Grid","container","spacing","component","Form","item","xs","Typography","variant","label","select","MenuItem","SOCKJS","Button","color","ConnectionInfoView","direction","size","onClick","formatBody","parse","e","MessageListView","Toolbar","disableGutters","List","map","index","ListItem","date","format","Object","entries","Divider","useStyle","makeStyles","theme","root","backgroundColor","JsonInput","className","onAnimationStart","onBlur","onFocus","onChange","classes","handleChange","target","useEffect","clsx","event","onBeforeChange","_editor","_data","options","mode","json","autoCloseBrackets","JsonEditor","InputProps","inputComponent","multiline","SendMessageView","alignItems","SubscriptionForm","helpers","resetForm","SubscriptionListView","toggleSubscriptionHandler","removeSubscriptionHandler","ListItemIcon","Checkbox","edge","checked","disableRipple","ListItemText","primary","ListItemSecondaryAction","IconButton","padding","App","lg","createMuiTheme","palette","main","blue","ReactDOM","render","StrictMode","ThemeProvider","CssBaseline","document","getElementById"],"mappings":"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","file":"static/js/main.c4342e7d.chunk.js","sourcesContent":["import React, { forwardRef } from 'react'\r\nimport { TextField as MuiTextField, TextFieldProps as MuiTextFieldProps} from '@material-ui/core';\r\nimport { useField } from 'formik';\r\n\r\nexport type TextFieldProps = Omit<MuiTextFieldProps, \"value\" | \"onChange\" | \"onBlur\" | \"error\"> & {\r\n    name: string;\r\n}\r\n\r\nconst TextField = forwardRef<HTMLDivElement, TextFieldProps>((props, ref) => {\r\n\r\n    const [field, meta] = useField(props.name);\r\n    const error = Boolean(meta.touched && meta.error);\r\n    const helperText = error ? meta.error : props.helperText;\r\n\r\n    return (\r\n        <MuiTextField {...field} {...props} error={error} helperText={helperText} ref={ref} />\r\n    )\r\n})\r\n\r\nTextField.defaultProps = {\r\n    fullWidth: true\r\n}\r\n\r\nexport default TextField\r\n","import {\r\n    Subscription as StompSubscription,\r\n    Message as StompMessage,\r\n} from \"stompjs\";\r\nimport Action, {\r\n    CONNECTED,\r\n    DISCONNECTED,\r\n    MESSAGES_CLEARED,\r\n    MESSAGE_RECEIVED,\r\n    SUBSCRIPTION_ADDED,\r\n    SUBSCRIPTION_DISABLED,\r\n    SUBSCRIPTION_ENABLED,\r\n    SUBSCRIPTION_REMOVED,\r\n} from \"./actionTypes\";\r\n\r\nexport type Subscription = StompSubscription & {\r\n    enabled: boolean;\r\n};\r\n\r\nexport type Message = StompMessage & {\r\n    timestamp: Date;\r\n};\r\n\r\nexport enum ConnectionType {\r\n    WEBSOCKET = \"WebSocket\",\r\n    SOCKJS = \"SockJS\",\r\n}\r\n\r\nexport type State = {\r\n    connection: {\r\n        connected: boolean;\r\n        url: string | null;\r\n        type: ConnectionType | null;\r\n    };\r\n    subscriptions: {\r\n        [destination: string]: Subscription;\r\n    };\r\n    messages: Message[];\r\n};\r\n\r\nconst reducer = (state: State, action: Action): State => {\r\n    switch (action.type) {\r\n        case CONNECTED: {\r\n            return {\r\n                connection: {\r\n                    url: action.url,\r\n                    connected: true,\r\n                    type: action.connectionType,\r\n                },\r\n                subscriptions: {},\r\n                messages: [],\r\n            };\r\n        }\r\n        case DISCONNECTED: {\r\n            return {\r\n                connection: {\r\n                    connected: false,\r\n                    url: null,\r\n                    type: null,\r\n                },\r\n                subscriptions: {},\r\n                messages: [],\r\n            };\r\n        }\r\n        case SUBSCRIPTION_ADDED: {\r\n            let subscriptions = { ...state.subscriptions };\r\n\r\n            subscriptions[action.destination] = {\r\n                ...action.subscription,\r\n                enabled: true,\r\n            };\r\n\r\n            return {\r\n                ...state,\r\n                subscriptions,\r\n            };\r\n        }\r\n        case SUBSCRIPTION_DISABLED: {\r\n            let subscriptions = { ...state.subscriptions };\r\n\r\n            const subscription = subscriptions[action.destination];\r\n\r\n            subscriptions[action.destination] = {\r\n                ...subscription,\r\n                enabled: false,\r\n            };\r\n\r\n            return {\r\n                ...state,\r\n                subscriptions,\r\n            };\r\n        }\r\n        case SUBSCRIPTION_ENABLED: {\r\n            let subscriptions = { ...state.subscriptions };\r\n\r\n            subscriptions[action.destination] = {\r\n                ...action.subscription,\r\n                enabled: true,\r\n            };\r\n\r\n            return {\r\n                ...state,\r\n                subscriptions,\r\n            };\r\n        }\r\n        case SUBSCRIPTION_REMOVED: {\r\n            let subscriptions = { ...state.subscriptions };\r\n\r\n            delete subscriptions[action.destination];\r\n\r\n            return {\r\n                ...state,\r\n                subscriptions,\r\n            };\r\n        }\r\n        case MESSAGE_RECEIVED: {\r\n            const message = {\r\n                ...action.message,\r\n                timestamp: action.timestamp,\r\n            };\r\n\r\n            const messages = [...state.messages, message];\r\n\r\n            return {\r\n                ...state,\r\n                messages,\r\n            };\r\n        }\r\n        case MESSAGES_CLEARED: {\r\n            return {\r\n                ...state,\r\n                messages: [],\r\n            };\r\n        }\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport default reducer;\r\n","import { Message, Subscription } from \"stompjs\";\r\nimport { ConnectionType } from \"./reducer\";\r\n\r\nexport const CONNECTED = \"CONNECTED\";\r\nexport const DISCONNECTED = \"DISCONNECTED\";\r\nexport const SUBSCRIPTION_ADDED = \"SUBSCRIPTION_ADDED\";\r\nexport const SUBSCRIPTION_DISABLED = \"SUBSCRIPTION_DISABLED\";\r\nexport const SUBSCRIPTION_ENABLED = \"SUBSCRIPTION_ENABLED\";\r\nexport const SUBSCRIPTION_REMOVED = \"SUBSCRIPTION_REMOVED\";\r\nexport const MESSAGE_RECEIVED = \"MESSAGE_RECEIVED\";\r\nexport const MESSAGES_CLEARED = \"MESSAGES_CLEARED\";\r\n\r\ntype Connected = {\r\n    type: typeof CONNECTED;\r\n    url: string;\r\n    connectionType: ConnectionType;\r\n}\r\n\r\ntype Disconnected = {\r\n    type: typeof DISCONNECTED;\r\n}\r\n\r\ntype SubscriptionAdded = {\r\n    type: typeof SUBSCRIPTION_ADDED;\r\n    destination: string;\r\n    subscription: Subscription;\r\n}\r\n\r\ntype SubscriptionDisabled = {\r\n    type: typeof SUBSCRIPTION_DISABLED;\r\n    destination: string;\r\n}\r\n\r\ntype SubscriptionEnabled = {\r\n    type: typeof SUBSCRIPTION_ENABLED;\r\n    destination: string;\r\n    subscription: Subscription;\r\n}\r\n\r\ntype SubscriptionRemoved = {\r\n    type: typeof SUBSCRIPTION_REMOVED;\r\n    destination: string;\r\n}\r\n\r\ntype MessageReceived = {\r\n    type: typeof MESSAGE_RECEIVED;\r\n    message: Message;\r\n    timestamp: Date;\r\n}\r\n\r\ntype MessagesCleared = {\r\n    type: typeof MESSAGES_CLEARED;\r\n}\r\n\r\ntype Action = Connected | Disconnected | SubscriptionAdded | SubscriptionDisabled | SubscriptionEnabled | SubscriptionRemoved | MessageReceived | MessagesCleared;\r\n\r\nexport default Action;","import { Message, Subscription } from \"stompjs\";\r\nimport Action, { CONNECTED, DISCONNECTED, MESSAGES_CLEARED, MESSAGE_RECEIVED, SUBSCRIPTION_ADDED, SUBSCRIPTION_DISABLED, SUBSCRIPTION_ENABLED, SUBSCRIPTION_REMOVED } from \"./actionTypes\";\r\nimport { ConnectionType } from \"./reducer\";\r\n\r\nexport default class Actions {\r\n\r\n    public static connected = (url: string, type: ConnectionType): Action => ({\r\n        type: CONNECTED,\r\n        url,\r\n        connectionType: type\r\n    })\r\n\r\n    public static disconnected = (): Action => ({\r\n        type: DISCONNECTED\r\n    })\r\n\r\n    public static subscriptionAdded = (destination: string, subscription: Subscription): Action => ({\r\n        type: SUBSCRIPTION_ADDED,\r\n        destination,\r\n        subscription\r\n    })\r\n\r\n    public static subscriptionDisabled = (destination: string): Action => ({\r\n        type: SUBSCRIPTION_DISABLED,\r\n        destination\r\n    })\r\n\r\n    public static subscriptionEnabled = (destination: string, subscription: Subscription): Action => ({\r\n        type: SUBSCRIPTION_ENABLED,\r\n        destination,\r\n        subscription\r\n    })\r\n\r\n    public static subscriptionRemoved = (destination: string): Action => ({\r\n        type: SUBSCRIPTION_REMOVED,\r\n        destination\r\n    })\r\n\r\n    public static messageReceived = (message: Message): Action => ({\r\n        type: MESSAGE_RECEIVED,\r\n        message,\r\n        timestamp: new Date()\r\n    })\r\n\r\n    public static messagesCleared = (): Action => ({\r\n        type: MESSAGES_CLEARED\r\n    })\r\n\r\n}","import React, { createContext, PropsWithChildren, useCallback, useContext, useDebugValue, useReducer, useRef } from 'react'\r\nimport Stomp, { Client } from 'stompjs';\r\nimport Actions from './state/actions';\r\nimport reducer, { ConnectionType, State } from './state/reducer';\r\n\r\nexport type StompContextValue = {\r\n    state: State;\r\n    connect: (ws: WebSocket, type: ConnectionType) => Promise<void>;\r\n    disconnect: () => void;\r\n    addSubscription: (destination: string) => void;\r\n    toggleSubscription: (destination: string) => void;\r\n    removeSubscription: (destination: string) => void;\r\n    clearMessages: () => void;\r\n    send: (destination: string, headers?: {}, body?: any) => void;\r\n}\r\n\r\nconst initialContextValue: StompContextValue = {} as StompContextValue;\r\n\r\nconst StompContext = createContext(initialContextValue);\r\n\r\nconst initialState: State = {\r\n    connection: {\r\n        url: null,\r\n        connected: false,\r\n        type: null\r\n    },\r\n    subscriptions: {},\r\n    messages: [],\r\n};\r\n\r\nexport const useStompContext = () => {\r\n    const context = useContext(StompContext);\r\n\r\n    useDebugValue(context.state);\r\n\r\n    return context;\r\n};\r\n\r\nexport const StompContextProvider = (props: PropsWithChildren<{}>) => {\r\n\r\n    const client = useRef<Client>();\r\n    const [state, dispatch] = useReducer(reducer, initialState);\r\n\r\n    const connect = useCallback((ws: WebSocket, type: ConnectionType) => new Promise<void>((resolve, reject) => {\r\n        client.current = Stomp.over(ws);\r\n        client.current.debug = console.debug;\r\n        client.current.connect(\r\n            {},\r\n            () => {\r\n                dispatch(Actions.connected(ws.url, type));\r\n                resolve();\r\n            },\r\n            () => {\r\n                dispatch(Actions.disconnected());\r\n            }\r\n        )\r\n    }), []);\r\n\r\n    const disconnect = useCallback(() => {\r\n        client.current?.disconnect(() => {\r\n            dispatch(Actions.disconnected());\r\n        });\r\n    }, []);\r\n\r\n    const subscribe = useCallback((destination: string) => {\r\n        return client.current!.subscribe(\r\n            destination,\r\n            message => {\r\n                dispatch(Actions.messageReceived(message));\r\n            }\r\n        )\r\n    }, []);\r\n\r\n    const addSubscription = useCallback((destination: string) => {\r\n        const subscription = subscribe(destination);\r\n\r\n        dispatch(Actions.subscriptionAdded(destination, subscription));\r\n    }, [subscribe]);\r\n\r\n    const toggleSubscription = useCallback((destination: string) => {\r\n        const subscription = state.subscriptions[destination];\r\n\r\n        if(subscription.enabled) {\r\n            subscription.unsubscribe();\r\n            dispatch(Actions.subscriptionDisabled(destination));\r\n        } else {\r\n            const newSubscription = subscribe(destination);\r\n\r\n            dispatch(Actions.subscriptionEnabled(destination, newSubscription));\r\n        }\r\n    }, [subscribe, state.subscriptions]);\r\n\r\n    const removeSubscription = useCallback((destination: string) => {\r\n        const subscription = state.subscriptions[destination];\r\n\r\n        if(subscription.enabled) {\r\n            subscription.unsubscribe();\r\n        }\r\n\r\n        dispatch(Actions.subscriptionRemoved(destination));\r\n    }, [state.subscriptions]);\r\n\r\n    const clearMessages = useCallback(() => {\r\n        dispatch(Actions.messagesCleared());\r\n    }, []);\r\n\r\n    const send = useCallback((destination: string, headers?: {}, body?: any) => {\r\n        client.current?.send(destination, headers, typeof body === 'string' ? body : JSON.stringify(body));\r\n    }, []);\r\n\r\n    return (\r\n        <StompContext.Provider value={{\r\n            state,\r\n            connect,\r\n            disconnect,\r\n            addSubscription,\r\n            toggleSubscription,\r\n            removeSubscription,\r\n            clearMessages,\r\n            send\r\n        }}>\r\n            {props.children}\r\n        </StompContext.Provider>\r\n    )\r\n}\r\n\r\nexport default StompContext\r\n","import { Button, Grid, MenuItem, Typography } from '@material-ui/core';\r\nimport { Form, Formik } from 'formik';\r\nimport React from 'react'\r\nimport SockJS from 'sockjs-client';\r\nimport TextField from './components/TextField';\r\nimport { ConnectionType } from './state/reducer';\r\nimport { useStompContext } from './StompContext';\r\n\r\ntype Values = {\r\n    url: string;\r\n    connectionType: ConnectionType;\r\n}\r\n\r\nconst initialValues: Values = {\r\n    url: \"\",\r\n    connectionType: ConnectionType.WEBSOCKET\r\n}\r\n\r\nconst ConnectionForm = () => {\r\n\r\n    const {connect} = useStompContext();\r\n\r\n    const handleSubmit = (values: Values) => {\r\n        const { url, connectionType } = values;\r\n        let ws: WebSocket;\r\n\r\n        if(connectionType === ConnectionType.WEBSOCKET) {\r\n            ws = new WebSocket(url);\r\n        } else {\r\n            ws = new SockJS(url);\r\n        }\r\n\r\n        connect(ws, connectionType);\r\n    }\r\n\r\n    return (\r\n        <Formik\r\n            initialValues={initialValues}\r\n            onSubmit={handleSubmit}\r\n        >\r\n            <Grid container spacing={2} component={Form}>\r\n            <Grid item xs={12}>\r\n                <Typography variant=\"h5\">Connect to a STOMP Websocket Server</Typography>\r\n            </Grid>\r\n            <Grid item xs={12}>\r\n                <TextField name=\"connectionType\" label=\"Type\" select>\r\n                    <MenuItem value={ConnectionType.WEBSOCKET}>\r\n                        {ConnectionType.WEBSOCKET}\r\n                    </MenuItem>\r\n                    <MenuItem value={ConnectionType.SOCKJS}>\r\n                        {ConnectionType.SOCKJS}\r\n                    </MenuItem>\r\n                </TextField>\r\n            </Grid>\r\n            <Grid item xs={12}>\r\n                <TextField name=\"url\" label=\"URL\" />\r\n            </Grid>\r\n            <Grid item>\r\n                <Button color=\"primary\" variant=\"contained\" type=\"submit\">\r\n                    Connect\r\n                </Button>\r\n            </Grid>\r\n        </Grid>\r\n        </Formik>\r\n    )\r\n}\r\n\r\nexport default ConnectionForm\r\n","import { Button, Grid, Typography } from \"@material-ui/core\";\r\nimport React from \"react\";\r\nimport { useStompContext } from \"./StompContext\";\r\n\r\nconst ConnectionInfoView = () => {\r\n    const {\r\n        state: {\r\n            connection: { url, type },\r\n        },\r\n        disconnect,\r\n    } = useStompContext();\r\n\r\n    return (\r\n        <Grid container spacing={2} direction=\"column\">\r\n            <Grid item>\r\n                <Typography variant=\"h5\">Connection</Typography>\r\n            </Grid>\r\n            <Grid item>\r\n                <Typography>{`${type} (STOMP)`}</Typography>\r\n            </Grid>\r\n            <Grid item>\r\n                <Typography>{url}</Typography>\r\n            </Grid>\r\n            <Grid item>\r\n                <Button variant=\"outlined\" size=\"small\" onClick={disconnect}>\r\n                    Disconnect\r\n                </Button>\r\n            </Grid>\r\n        </Grid>\r\n    );\r\n};\r\n\r\nexport default ConnectionInfoView;\r\n","import {\r\n    Button,\r\n    Divider,\r\n    Grid,\r\n    List,\r\n    ListItem,\r\n    Toolbar,\r\n    Typography,\r\n} from \"@material-ui/core\";\r\nimport { format } from \"date-fns\";\r\nimport React, { Fragment } from \"react\";\r\nimport { useStompContext } from \"./StompContext\";\r\n\r\nconst formatBody = (body: string): string => {\r\n    try {\r\n        return JSON.stringify(JSON.parse(body), null, 4);\r\n    } catch (e) {\r\n        return body;\r\n    }\r\n};\r\n\r\nconst formatDate = (date: Date): string => format(date, \"HH:mm:ss\");\r\n\r\nconst MessageListView = () => {\r\n    \r\n    const { state: { messages }, clearMessages } = useStompContext();\r\n\r\n    return (\r\n        <Fragment>\r\n            <Typography variant=\"h5\">Messages</Typography>\r\n            <Toolbar disableGutters>\r\n                <Button variant=\"outlined\" onClick={clearMessages} size=\"small\">\r\n                    Clear\r\n                </Button>\r\n            </Toolbar>\r\n            <List>\r\n                {messages.map((message, index) => (\r\n                    <Fragment key={index}>\r\n                        <ListItem>\r\n                            <Grid container>\r\n                                <Grid item xs={12}>\r\n                                    <Typography>\r\n                                        {formatDate(message.timestamp)}\r\n                                    </Typography>\r\n                                </Grid>\r\n                                {Object.entries(message.headers).map(\r\n                                    ([name, value]) => (\r\n                                        <Fragment key={name}>\r\n                                            <Grid item xs={6}>\r\n                                                <code>\r\n                                                    {name + \":\"}\r\n                                                </code>\r\n                                            </Grid>\r\n                                            <Grid item xs={6}>\r\n                                                <code>\r\n                                                    {value + \"\"}\r\n                                                </code>\r\n                                            </Grid>\r\n                                        </Fragment>\r\n                                    )\r\n                                )}\r\n                                <Grid item xs={12} />\r\n                                <Grid item xs={12}>\r\n                                    <pre><code>{formatBody(message.body)}</code></pre>\r\n                                </Grid>\r\n                            </Grid>\r\n                        </ListItem>\r\n                        <Divider />\r\n                    </Fragment>\r\n                ))}\r\n            </List>\r\n        </Fragment>\r\n    );\r\n};\r\n\r\nexport default MessageListView;\r\n","import React, { useEffect } from \"react\";\r\n\r\nimport { Controlled as CodeMirror } from \"react-codemirror2\";\r\nimport \"codemirror/mode/javascript/javascript\";\r\nimport \"codemirror/lib/codemirror.css\";\r\nimport \"codemirror/addon/edit/closebrackets\";\r\nimport \"codemirror/theme/material-darker.css\";\r\nimport { InputBaseComponentProps, makeStyles } from \"@material-ui/core\";\r\nimport clsx from \"clsx\";\r\n\r\nconst useStyle = makeStyles(theme => ({\r\n    root: {\r\n        \"& .CodeMirror\": {\r\n            backgroundColor: \"inherit\"\r\n        }\r\n    }\r\n}), { name: \"JsonInput\" });\r\n\r\nconst JsonInput = (props: InputBaseComponentProps) => {\r\n\r\n    const { className,  onAnimationStart, onBlur, onFocus, onChange, value, name } = props;\r\n    const classes = useStyle(props);\r\n\r\n    const handleChange = (value: string) => {\r\n        const event = {\r\n            target: {\r\n                value,\r\n                name\r\n            }\r\n        } as React.ChangeEvent<HTMLInputElement>;\r\n\r\n        onChange && onChange(event);\r\n    }\r\n\r\n    const handleBeforeChange = (_editor: any, _data: any, value: string) => {\r\n        handleChange(value);\r\n    };\r\n\r\n    const handleFocus = (e: React.FocusEvent) => {\r\n        const event = {\r\n            ...e,\r\n            target: {\r\n                ...e.target,\r\n                name\r\n            }\r\n        } as React.FocusEvent<HTMLInputElement>;\r\n\r\n        onFocus && onFocus(event);\r\n    }\r\n\r\n    const handleBlur = (e: React.FocusEvent) => {\r\n        const event = {\r\n            ...e,\r\n            target: {\r\n                ...e.target,\r\n                name\r\n            }\r\n        } as React.FocusEvent<HTMLInputElement>;\r\n\r\n        onBlur && onBlur(event);\r\n    }\r\n\r\n    const handleAnimationStart = (e: React.AnimationEvent) => {\r\n        onAnimationStart && onAnimationStart(e as React.AnimationEvent<HTMLInputElement>);\r\n    }\r\n\r\n    useEffect(() => {\r\n        handleChange(value);\r\n        // eslint-disable-next-line\r\n    }, [value]);\r\n\r\n    return (\r\n        <div\r\n            className={clsx(classes.root, className)}\r\n            onFocus={handleFocus}\r\n            onBlur={handleBlur}\r\n            onAnimationStart={handleAnimationStart}\r\n        >\r\n            <CodeMirror\r\n                value={value}\r\n                onBeforeChange={handleBeforeChange}\r\n                options={{\r\n                    mode: {\r\n                        name: \"javascript\",\r\n                        json: true,\r\n                    },\r\n                    theme: 'material-darker',\r\n                    autoCloseBrackets: true,\r\n                }}\r\n            />\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default JsonInput;\r\n","import React from 'react'\r\nimport TextField, { TextFieldProps } from '../TextField';\r\nimport JsonInput from './JsonInput';\r\n\r\nexport type JsonEditorProps = Omit<TextFieldProps, \"multiline\">;\r\n\r\nconst JsonEditor = (props: JsonEditorProps) => {\r\n\r\n    const InputProps = {\r\n        ...props.InputProps,\r\n        inputComponent: JsonInput\r\n    }\r\n\r\n    return (\r\n        <TextField {...props} InputProps={InputProps} multiline />\r\n    )\r\n}\r\n\r\nexport default JsonEditor\r\n","import { Button, Grid, Typography } from \"@material-ui/core\";\r\nimport { Form, Formik } from \"formik\";\r\nimport React from \"react\";\r\nimport JsonEditor from \"./components/JsonEditor/JsonEditor\";\r\nimport TextField from \"./components/TextField\";\r\nimport { useStompContext } from \"./StompContext\";\r\n\r\ntype Values = {\r\n    destination: string;\r\n    body: string;\r\n};\r\n\r\nconst initialValues: Values = {\r\n    destination: \"\",\r\n    body: \"\",\r\n};\r\n\r\nconst SendMessageView = () => {\r\n    const { send } = useStompContext();\r\n\r\n    const handleSubmit = (values: Values) => {\r\n        send(values.destination, {}, values.body);\r\n    };\r\n\r\n    return (\r\n        <Formik initialValues={initialValues} onSubmit={handleSubmit}>\r\n            <Grid container spacing={2} alignItems=\"flex-end\" component={Form}>\r\n                <Grid item xs={12}>\r\n                    <Typography variant=\"h5\">Send Message</Typography>\r\n                </Grid>\r\n                <Grid item xs>\r\n                    <TextField name=\"destination\" label=\"Destination\" />\r\n                </Grid>\r\n                <Grid item>\r\n                    <Button variant=\"outlined\" color=\"primary\" fullWidth type=\"submit\" size=\"small\">\r\n                        Send\r\n                    </Button>\r\n                </Grid>\r\n                <Grid item xs={12}>\r\n                    <JsonEditor name=\"body\" label=\"Body\" variant=\"outlined\" />\r\n                </Grid>\r\n            </Grid>\r\n        </Formik>\r\n    );\r\n};\r\n\r\nexport default SendMessageView;\r\n","import { Button, Grid } from '@material-ui/core';\r\nimport { Form, Formik, FormikHelpers } from 'formik';\r\nimport React from 'react'\r\nimport TextField from './components/TextField';\r\nimport { useStompContext } from './StompContext';\r\n\r\ntype Values = {\r\n    destination: string;\r\n}\r\n\r\nconst initialValues: Values = {\r\n    destination: \"\"\r\n}\r\n\r\nconst SubscriptionForm = () => {\r\n\r\n    const { addSubscription } = useStompContext();\r\n\r\n    const handleSubmit = (values: Values, helpers: FormikHelpers<Values>) => {\r\n        addSubscription(values.destination);\r\n        helpers.resetForm();\r\n    }\r\n\r\n    return (\r\n        <Formik\r\n            initialValues={initialValues}\r\n            onSubmit={handleSubmit}\r\n        >\r\n            <Grid container spacing={2} alignItems=\"flex-end\" component={Form}>\r\n            <Grid item>\r\n                <TextField name=\"destination\" label=\"Destination\" />\r\n            </Grid>\r\n            <Grid item>\r\n                <Button variant=\"outlined\" color=\"primary\" size=\"small\" type=\"submit\">\r\n                    Subscribe\r\n                </Button>\r\n            </Grid>\r\n        </Grid>\r\n        </Formik>\r\n    )\r\n}\r\n\r\nexport default SubscriptionForm\r\n","import { Checkbox, IconButton, List, ListItem, ListItemIcon, ListItemSecondaryAction, ListItemText, Toolbar, Typography } from '@material-ui/core';\r\nimport React, { Fragment } from 'react'\r\nimport { useStompContext } from './StompContext'\r\nimport SubscriptionForm from './SubscriptionForm';\r\nimport RemoveIcon from '@material-ui/icons/RemoveCircleOutline';\r\n\r\nconst SubscriptionListView = () => {\r\n\r\n    const { state: { subscriptions }, toggleSubscription, removeSubscription } = useStompContext();\r\n\r\n    const toggleSubscriptionHandler = (destination: string) => () => {\r\n        toggleSubscription(destination);\r\n    }\r\n\r\n    const removeSubscriptionHandler = (destination: string) => () => {\r\n        removeSubscription(destination);\r\n    }\r\n\r\n    return (\r\n        <Fragment>\r\n            <Typography variant=\"h5\">Subscriptions</Typography>\r\n            <Toolbar disableGutters>\r\n                <SubscriptionForm />\r\n            </Toolbar>\r\n            <List>\r\n                {Object.entries(subscriptions).map(([destination, subscription]) => (\r\n                    <ListItem key={destination} disableGutters>\r\n                        <ListItemIcon>\r\n                            <Checkbox\r\n                                edge=\"start\"\r\n                                checked={subscription.enabled}\r\n                                disableRipple\r\n                                color=\"primary\"\r\n                                onClick={toggleSubscriptionHandler(destination)}\r\n                            />\r\n                        </ListItemIcon>\r\n                        <ListItemText primary={destination} />\r\n                        <ListItemSecondaryAction>\r\n                            <IconButton\r\n                                edge=\"end\"\r\n                                size=\"small\"\r\n                                color=\"secondary\"\r\n                                onClick={removeSubscriptionHandler(destination)}\r\n                            >\r\n                                <RemoveIcon />\r\n                            </IconButton>\r\n                        </ListItemSecondaryAction>\r\n                    </ListItem>\r\n                ))}\r\n            </List>\r\n        </Fragment>\r\n    )\r\n}\r\n\r\nexport default SubscriptionListView\r\n","import { Grid, makeStyles } from \"@material-ui/core\";\r\nimport React from \"react\";\r\nimport ConnectionForm from \"./ConnectionForm\";\r\nimport ConnectionInfoView from \"./ConnectionInfoView\";\r\nimport MessageListView from \"./MessageListView\";\r\nimport SendMessageView from \"./SendMessageView\";\r\nimport { useStompContext } from \"./StompContext\";\r\nimport SubscriptionListView from \"./SubscriptionListView\";\r\n\r\nconst useStyle = makeStyles(theme => ({\r\n    root: {\r\n        padding: theme.spacing(2)\r\n    }\r\n}), { name: \"App\" });\r\n\r\nconst App = () => {\r\n\r\n    const classes = useStyle();\r\n\r\n    const {\r\n        state: { connection },\r\n    } = useStompContext();\r\n\r\n    return (\r\n        <main className={classes.root}>\r\n            {connection.connected ? (\r\n                <Grid container spacing={2}>\r\n                    <Grid item lg={3} container spacing={2} direction=\"column\">\r\n                        <Grid item>\r\n                            <ConnectionInfoView />\r\n                        </Grid>\r\n                        <Grid item>\r\n                            <SubscriptionListView />\r\n                        </Grid>\r\n                    </Grid>\r\n                    <Grid item lg={5}>\r\n                            <SendMessageView />\r\n                        </Grid>\r\n                    <Grid item lg={4}>\r\n                        <MessageListView />\r\n                    </Grid>\r\n                </Grid>\r\n            ) : (\r\n                <ConnectionForm />\r\n            )}\r\n        </main>\r\n    );\r\n};\r\n\r\nexport default App;\r\n","import { createMuiTheme } from \"@material-ui/core\";\r\nimport { blue } from \"@material-ui/core/colors\";\r\n\r\nconst theme = createMuiTheme({\r\n    palette: {\r\n        type: \"dark\",\r\n        primary: {\r\n            main: blue[400]\r\n        }\r\n    }\r\n});\r\n\r\nexport default theme;","import { CssBaseline, ThemeProvider } from \"@material-ui/core\";\r\nimport React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport App from \"./App\";\r\nimport theme from \"./resources/theme\";\r\nimport { StompContextProvider } from \"./StompContext\";\r\n\r\nReactDOM.render(\r\n    <React.StrictMode>\r\n        <StompContextProvider>\r\n            <ThemeProvider theme={theme}>\r\n                <CssBaseline />\r\n                <App />\r\n            </ThemeProvider>\r\n        </StompContextProvider>\r\n    </React.StrictMode>,\r\n    document.getElementById(\"root\")\r\n);\r\n"],"sourceRoot":""}